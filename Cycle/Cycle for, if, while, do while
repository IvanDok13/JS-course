                                                      //While                                                
const printNumbers = (lastNumber) => {
  // i – index 
  let i = 1;

  while (i <= lastNumber) {
    console.log(i);
    i += 1; //i = i + 1 
  }
  console.log('finished!');
};

printNumbers(3);
// => 1
// => 2
// => 3
// => finished!


//Modify the printNumbers() function to print numbers in reverse order
const printNumbers = (initialNumber) => {
  var i = initialNumber;
  while (i >= 1) {
    console.log(i);
    i --;
  }
  console.log('finished!');
};

printNumbers(0); //'finished!'
printNumbers(2); //'2,1, finished!'
printNumbers(7); // '7, 6, 5, 4, 3, 2, 1, finished!'
printNumbers(-5); //'finished!'

                                                             // Multiply cycle for range
const multiplyNumbersFromRange = (start, finish) => {
  let i = start;
  let multiply = 1;
  while (i <= finish) {
    multiply *= i;
    i += 1;
  }
  return multiply;
}
console.log(multiplyNumbersFromRange(3, 5)); // 60



//Implement the joinNumbersFromRange() function, which joins all numbers in a range into a string and returns it:
const joinNumbersFromRange = (start, finish) => {
  let i = start;
  let joinNumbers = '';

  while (i <= finish) {
    joinNumbers = `${joinNumbers}${i}`;
    i += 1;
  }
  return joinNumbers;
}

console.log(joinNumbersFromRange(-3, 5)) //-3-2-1012345


                                                                //Reverse cycle
const reverseNameBySymbol = (name) => {
  let i = 0;
  let result = '';
  
  while (i < name.length) {
    result = `${name[i]}${result}`;
    i += 1;
  }
  
  return result;
};

console.log(reverseNameBySymbol('Arua')); //'aurA'


/*Implement the mySubstr() function, which extracts a substring of a specified length from a string. 
It takes two arguments (string and length) as input and returns a substring starting from the first character:*/

const mySubstr = (text, textBefore) => {
  var i = 0;
  var result = '';
  while (i <= textBefore) {
    result = `${text.slice(0, i)}`;
    i += 1;
  }
  
  return result;
};

console.log(mySubstr('Hello World!', 4)) //'Hell'

//OR

const mySubstr = (text, textBefore) => {
  let result = '';
  let i = 0;
  while (i < textBefore) {
    result += text[i];
    i += 1;
  }

  return result;
};

                                                                           //While +if
                                                                           
//The countChars() function from theory counts how many times a letter appears in a sentence, case is not important:
const countChars = (text, letter) => {
  let i = 0;
  let count = 0;
  while (i < text.length) {
    if (text[i].toLowerCase() === letter.toLowerCase()) {
      count += 1;
    }
    i += 1;
  }

  return count;
};

console.log(countChars('HeLLo World!', 'L')) //3


//Write a makeItFunny() function that takes a string as input and returns a copy of it with every nth element converted to uppercase
const makeItFunny = (text, numberOfElement) => {
  let i = 0;
  let result = '';
  while (i < text.length) {
    if ((i + 1) % numberOfElement === 0) {
      result += text[i].toUpperCase();
    } else {
      result += text[i];
    }
    i++;
  }

  return result;
};

console.log(makeItFunny('i never look back', 7)); //"i neveR look Back"
console.log(makeItFunny('i never look back', 3)); //"i NevEr LooK bAck"

//OR
const makeItFunny = (str, n) => {
  let i = 0;
  let result = '';
  while (i < str.length) {
    const current = str[i];
    if ((i + 1) % n === 0) {
      result = `${result}${current.toUpperCase()}`;
    } else {
      result = `${result}${current}`;
    }
    i++;
  }

  return result;
};


                                                        //FOR, continue, break
for (let i = 2; i <= 10; i++) {
  if (i % 2 !== 0) continue;
   console.log(i);
} // 2, 4, 6, 8, 10 this code prints even numbers.


const encrypt = (message) => {
  let result = '';
  for (let i = 0; i < message.length; i += 2) {
    if (message.length % 2 === 0) {
      result += message[i + 1] + message[i];
    } else {
      result += (message[i + 1] || '') + message[i];
    }
  }

  return result;
};

//OR
const encrypt = (str) => {
  let result = '';
  for (let i = 0; i < str.length; i += 2) {
    const nextSymbol = str[i + 1] || '';
    result = `${result}${nextSymbol}${str[i]}`;
  }

  return result;
};   
console.log(encrypt(Hello World!)) //"eHll ooWlr!d"

//1. Выведите в консоль числа, кратные 3, в диапазоне от 1 до 40.
for (let i = 1; i < 41; i++) {
  if (i % 3 === 0) console.log(i);
}
//2. Задайте пустой массив arr. Используя метод push, заполните 
//   в цикле массив четными числами от 30 до 10 с порядке убывания.
let arr = [];
for (let i = 30; i >= 10; i--) {
  if (i % 2 === 0) {
    arr.push(i);
  }
}
console.log(arr);
//3. Задана строка str = 'Now I am studying programming on JS'.
// Найти количество пробелов в строке.
let str = 'Now I am studying programming on JS';
let counter = 0;
for (let i = 0; i < str.length; i++) {
  if (str[i] === ' ') counter++;
}
console.log(counter);
//4. Найти общее количество гласных букв (a,o,e,u,i) в строке str.
let vowel = 0;
for (let i = 0; i < str.length; i++) {
  if (str[i] === 'a'|| str[i] === 'o' || str[i] === 'e' || str[i] === 'u' || str[i] === 'i') vowel++;
}
console.log(vowel);
//5. Дан массив arr = [3, 7, 4, 9, 2, 10, 1, 17, 6, 23, 5, 13];
// Найти разность между максимальным и минимальным элементом массива.
let arr1 = [3, 7, 4, 9, 2, 10, 1, 17, 6, 23, 5, 13];
let min = arr1[1];
let max = arr1[2];
let difference = 0;
for (let i = 0; i < arr1.length; i++) {
  if (arr1[i] < min) min = arr1[i];
  if (arr1[i] > max) max = arr1[i];
}
difference = max - min;
console.log(min);
console.log(max);
console.log(difference);
